worker_processes auto;
thread_pool default threads=32 max_queue=65536;

events {
    worker_connections 4096;
    multi_accept on;
    use epoll;
}

http {
    upstream backend { # Nginx가 관리하는 서버그룹 정리
#         least_conn;
        server springboot1:8080;
        server springboot2:8080;
        server springboot3:8080;
        keepalive 32;
    }

    server {
        listen 80;
        server_name localhost;

        # WebSocket 엔드포인트 프록시 설정
        location /ws {
            proxy_pass http://backend/ws;  # Spring Boot의 WebSocket 엔드포인트로 전달
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "Upgrade"; # 명확한 연결 설정
            proxy_set_header Host $host;
            proxy_read_timeout 86400;  # 24시간 연결 유지
            proxy_send_timeout 86400;  # 24시간 연결 유지
            proxy_buffering off;  # WebSocket 연결에서는 버퍼링 해제
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Real-IP $remote_addr;
        }

        # 일반 HTTP 요청 프록시 (예: 정적 파일, API 등)
        location / {
            proxy_pass http://backend;
            proxy_http_version 1.1;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            aio threads=default;
            proxy_read_timeout 300s;
            proxy_send_timeout 300s;
        }
    }
}